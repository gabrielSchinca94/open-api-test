{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server zInspector server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
        "version": "1.0.0",
        "title": "zInspector",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "apiteam@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "x-logo": {
            "url": "/open-api-test/zInspectorBanner.png",
            "backgroundColor": "#FFFFFF",
            "altText": "Logo"
        }
    },
    "host": "propertytenant.swagger.io",
    "basePath": "/v2",
    "tags": [
        {
            "name": "Property",
            "description": "Everything about your Properties",
            "externalDocs": {
                "description": "Find out more",
                "url": "http://swagger.io"
            }
        },
        {
            "name": "Tenant",
            "description": "Access to propertytenant orders"
        },
        {
            "name": "Lease",
            "description": "Operations about lease",
            "externalDocs": {
                "description": "Find out more about our tenant",
                "url": "http://swagger.io"
            }
        }
    ],
    "schemes": [
        "https",
        "http"
    ],
    "paths": {
        "/property/findById": {
            "get": {
                "tags": [
                    "property"
                ],
                "summary": "Finds propertys by ID",
                "description": "Multiple id values can be provided separated by comma",
                "operationId": "findPropertysById",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "Id values that need to be considered for filter",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Property"
                            }
                        }
                    },
                    "404": {
                        "description": "Property not found"
                    }
                },
                "security": [
                    {
                        "propertytenant_auth": [
                            "write:propertys",
                            "read:propertys"
                        ]
                    }
                ]
            }
        },
        "/property/findByName": {
            "get": {
                "tags": [
                    "property"
                ],
                "summary": "Finds Propertys by Name",
                "description": "Multiple names can be provided with comma separated strings.",
                "operationId": "findPropertysByName",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Names to filter by",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Property"
                            }
                        }
                    },
                    "404": {
                        "description": "Property not found"
                    }
                },
                "security": [
                    {
                        "propertytenant_auth": [
                            "write:propertys",
                            "read:propertys"
                        ]
                    }
                ]
            }
        },
        "/property/{propertyId}": {
            "get": {
                "tags": [
                    "property"
                ],
                "summary": "Find property by ID",
                "description": "Returns a single property",
                "operationId": "getpropertyById",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "propertyId",
                        "in": "path",
                        "description": "ID of property to return",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Property"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "property not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "property"
                ],
                "summary": "Updates a property in the tenant with form data",
                "description": "",
                "operationId": "updatepropertyWithForm",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "propertyId",
                        "in": "path",
                        "description": "ID of property that needs to be updated",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "name",
                        "in": "formData",
                        "description": "Updated name of the property",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "formData",
                        "description": "Updated status of the property",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    },
                    "403": {
                        "description": "Invalid input"
                    },
                    "200": {
                        "description": "Success"
                    }
                },
                "security": [
                    {
                        "propertytenant_auth": [
                            "write:propertys",
                            "read:propertys"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "property"
                ],
                "summary": "Deletes a property",
                "description": "",
                "operationId": "deleteproperty",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "api_key",
                        "in": "header",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "propertyId",
                        "in": "path",
                        "description": "property id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "property not found"
                    },
                    "200": {
                        "description": "Success"
                    }
                },
                "security": [
                    {
                        "propertytenant_auth": [
                            "write:propertys",
                            "read:propertys"
                        ]
                    }
                ]
            }
        },
        "/tenant/getTenant/{tenantId}": {
            "get": {
                "tags": [
                    "tenant"
                ],
                "summary": "Find tenant by ID",
                "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
                "operationId": "getTenantById",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "tenantId",
                        "in": "path",
                        "description": "ID of tenant that needs to be fetched",
                        "required": true,
                        "type": "integer",
                        "maximum": 10,
                        "minimum": 1,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Tenant"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Tenant not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tenant"
                ],
                "summary": "Delete tenant by ID",
                "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
                "operationId": "deleteTenant",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "tenantId",
                        "in": "path",
                        "description": "ID of the tenant that needs to be deleted",
                        "required": true,
                        "type": "integer",
                        "minimum": 1,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Tenant not found"
                    },
                    "200": {
                        "description": "Successfull Operation"
                    }
                }
            }
        },
        "/tenant/inventory": {
            "get": {
                "tags": [
                    "tenant"
                ],
                "summary": "Returns property inventories by status",
                "description": "Returns a map of status codes to quantities",
                "operationId": "getInventory",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer",
                                "format": "int32"
                            }
                        }
                    },
                    "405": {
                        "description": "Some error"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/lease/createWithArray": {
            "post": {
                "tags": [
                    "lease"
                ],
                "summary": "Creates list of leases with given input array",
                "description": "",
                "operationId": "createleasesWithArrayInput",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of lease object",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Lease"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success"
                    },
                    "405": {
                        "description": "error"
                    },
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/lease/createWithList": {
            "post": {
                "tags": [
                    "lease"
                ],
                "summary": "Creates list of leases with given input array",
                "description": "",
                "operationId": "createleasesWithListInput",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of lease object",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Lease"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "403": {
                        "description": "error"
                    },
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/lease/{leasename}": {
            "get": {
                "tags": [
                    "lease"
                ],
                "summary": "Get lease by lease name",
                "description": "",
                "operationId": "getleaseByName",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "leasename",
                        "in": "path",
                        "description": "The name that needs to be fetched. Use lease1 for testing. ",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Lease"
                        }
                    },
                    "400": {
                        "description": "Invalid leasename supplied"
                    },
                    "404": {
                        "description": "lease not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "lease"
                ],
                "summary": "Updated lease",
                "description": "This can only be done by the logged in lease.",
                "operationId": "updatelease",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "leasename",
                        "in": "path",
                        "description": "name that need to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Updated lease object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Lease"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid lease supplied"
                    },
                    "404": {
                        "description": "lease not found"
                    },
                    "200": {
                        "description": "successful operation"
                    }
                }
            },
            "delete": {
                "tags": [
                    "lease"
                ],
                "summary": "Delete lease",
                "description": "This can only be done by the logged in lease.",
                "operationId": "deletelease",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "leasename",
                        "in": "path",
                        "description": "The name that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid leasename supplied"
                    },
                    "404": {
                        "description": "lease not found"
                    },
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/lease/login": {
            "get": {
                "tags": [
                    "lease"
                ],
                "summary": "Logs lease into the system",
                "description": "",
                "operationId": "loginlease",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "name": "leasename",
                        "in": "query",
                        "description": "The lease name for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "The password for login in clear text",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {
                            "X-Expires-After": {
                                "type": "string",
                                "format": "date-time",
                                "description": "date in UTC when token expires"
                            },
                            "X-Rate-Limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "calls per hour allowed by the lease"
                            }
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid leasename/password supplied"
                    }
                }
            }
        },
        "/lease/logout": {
            "get": {
                "tags": [
                    "lease"
                ],
                "summary": "Logs out current logged in lease session",
                "description": "",
                "operationId": "logoutlease",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [],
                "responses": {
                    "404": {
                        "description": "lease not found"
                    },
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/lease": {
            "post": {
                "tags": [
                    "lease"
                ],
                "summary": "Create lease",
                "description": "This can only be done by the logged in lease.",
                "operationId": "createlease",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Created lease object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Lease"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "lease not found"
                    },
                    "200": {
                        "description": "successful operation"
                    },
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
        },
        "propertytenant_auth": {
            "type": "oauth2",
            "authorizationUrl": "https://propertytenant.swagger.io/oauth/authorize",
            "flow": "implicit",
            "scopes": {
                "read:propertys": "read your propertys",
                "write:propertys": "modify propertys in your account"
            }
        }
    },
    "definitions": {
        "ApiResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Category"
            }
        },
        "Property": {
            "type": "object",
            "required": [
                "name",
                "city",
                "address"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string",
                    "example": "MyHouse"
                },
                "address": {
                    "type": "string",
                    "example": "Paraisos"
                },
                "address2": {
                    "type": "string",
                    "example": "M70 S10"
                },
                "city": {
                    "type": "string",
                    "example": "Ciudad de la Costa"
                },
                "state": {
                    "type": "string",
                    "example": "Canelones"
                },
                "country": {
                    "type": "string",
                    "example": "Uruguay"
                },
                "zip": {
                    "type": "string",
                    "example": "15005"
                },
                "vacancy": {
                    "type": "string",
                    "description": "property status in the tenant",
                    "enum": [
                        "",
                        "Vacant",
                        "Planned Vacancy",
                        "Active"
                    ]
                }
            },
            "xml": {
                "name": "Property"
            }
        },
        "Tag": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Tag"
            }
        },
        "Tenant": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "company": {
                    "type": "string",
                    "example": "zInspector"
                },
                "firstName": {
                    "type": "string",
                    "example": "Gabriel"
                },
                "lastName": {
                    "type": "string",
                    "example": "Schinca"
                },
                "email": {
                    "type": "string",
                    "example": "gabriel@zinspector.com"
                },
                "country": {
                    "type": "string",
                    "example": "Uruguay"
                },
                "phone": {
                    "type": "string",
                    "example": "26983064"
                },
                "cellPhone": {
                    "type": "string",
                    "example": "098329838"
                },
                "address": {
                    "type": "string",
                    "example": "Paraisos M70 S10"
                },
                "city": {
                    "type": "string",
                    "example": "Ciudad de la Costa"
                },
                "state": {
                    "type": "string",
                    "example": "Canelones"
                },
                "zip": {
                    "type": "string",
                    "example": "15005"
                },
                "category": {
                    "type": "string",
                    "description": "Category",
                    "enum": [
                        "Tenant",
                        "Applicant",
                        "Co-Signer",
                        "Lead",
                        "Other",
                        "Prospect"
                    ]
                }
            },
            "xml": {
                "name": "Tenant"
            }
        },
        "Lease": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "property": {
                    "$ref": "#/definitions/Property"
                },
                "rent": {
                    "type": "integer",
                    "format": "int64"
                },
                "status": {
                    "type": "string",
                    "description": "Lease Status",
                    "enum": [
                        "Listed",
                        "Moving In",
                        "Current",
                        "Current - Renewal",
                        "Moving Out",
                        "Moved Out - SD Pending",
                        "SD Returned",
                        "Moving In - Roomate",
                        "Moving Ouit - Roomate",
                        "Moved Out - SD Pending - Roomate",
                        "SD Returned - Roomate"
                    ]
                },
                "sigStatus": {
                    "type": "string",
                    "description": "Lease Signature Status",
                    "enum": [
                        "No Signatures",
                        "Own Notified of Lease/Renewal",
                        "Lease/Renewal Sent",
                        "Ten Sig - Partial",
                        "Ten Sig - Complete",
                        "Ten Comp - Sent to Owner",
                        "Complete"
                    ]
                },
                "leaseStart": {
                    "type": "string",
                    "format": "date-time"
                },
                "leaseEnd": {
                    "type": "string",
                    "format": "date-time"
                },
                "leaseMoveIn": {
                    "type": "string",
                    "format": "date-time"
                },
                "leaseMoveOut": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "xml": {
                "name": "Lease"
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    }
}